openapi: 3.0.3
info:
  title: Mobile App Api
  version: "1.0"
  description: An Api for Mobile App
paths:
  /api/v1/dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/v1/dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
        - dj-rest-auth
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/registration/:
    post:
      operationId: dj_rest_auth_registration_create
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Register"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Register"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/v1/dj-rest-auth/registration/resend-email/:
    post:
      operationId: dj_rest_auth_registration_resend_email_create
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ResendEmailVerification"
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/registration/verify-email/:
    post:
      operationId: dj_rest_auth_registration_verify_email_create
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - dj-rest-auth
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
  /api/v1/models/:
    get:
      operationId: models_list
      tags:
        - models
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BrandModel"
          description: ""
    post:
      operationId: models_create
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandModel"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/BrandModel"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/BrandModel"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandModel"
          description: ""
  /api/v1/models/{slug}/:
    get:
      operationId: models_retrieve
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - models
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandModel"
          description: ""
    put:
      operationId: models_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandModel"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/BrandModel"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/BrandModel"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandModel"
          description: ""
    patch:
      operationId: models_partial_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedBrandModel"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedBrandModel"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedBrandModel"
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandModel"
          description: ""
    delete:
      operationId: models_destroy
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - models
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/products/:
    get:
      operationId: products_list
      tags:
        - products
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          description: ""
    post:
      operationId: products_create
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
  /api/v1/products/{slug}/:
    get:
      operationId: products_retrieve
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - products
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    put:
      operationId: products_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    patch:
      operationId: products_partial_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedProduct"
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
    delete:
      operationId: products_destroy
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - products
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/types/:
    get:
      operationId: types_list
      tags:
        - types
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Type"
          description: ""
    post:
      operationId: types_create
      tags:
        - types
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Type"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Type"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Type"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
  /api/v1/types/{slug}/:
    get:
      operationId: types_retrieve
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - types
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
    put:
      operationId: types_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - types
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Type"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Type"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Type"
        required: true
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
    patch:
      operationId: types_partial_update
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - types
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedType"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedType"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedType"
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
    delete:
      operationId: types_destroy
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - types
      security:
        - cookieAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
components:
  schemas:
    BrandModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
      required:
        - id
        - title
    ColorEnum:
      enum:
        - R
        - B
        - G
      type: string
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - new_password1
        - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
        - new_password1
        - new_password2
        - token
        - uid
    PatchedBrandModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
        color:
          $ref: "#/components/schemas/ColorEnum"
        description:
          type: string
        stock:
          type: integer
        brand:
          type: string
          maxLength: 150
        img1:
          type: string
          format: uri
        img2:
          type: string
          format: uri
        img3:
          type: string
          format: uri
        img4:
          type: string
          format: uri
        img5:
          type: string
          format: uri
        model_id:
          type: integer
        type_id:
          type: integer
    PatchedType:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
        color:
          $ref: "#/components/schemas/ColorEnum"
        description:
          type: string
        stock:
          type: integer
        brand:
          type: string
          maxLength: 150
        img1:
          type: string
          format: uri
        img2:
          type: string
          format: uri
        img3:
          type: string
          format: uri
        img4:
          type: string
          format: uri
        img5:
          type: string
          format: uri
        model_id:
          type: integer
        type_id:
          type: integer
      required:
        - brand
        - color
        - description
        - id
        - img1
        - img2
        - img3
        - img4
        - img5
        - model_id
        - price
        - stock
        - title
        - type_id
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
        - password1
        - password2
        - username
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
        - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
        - key
    Type:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
      required:
        - id
        - title
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - email
        - pk
        - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
        - key
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
